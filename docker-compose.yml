networks:
  paradb.net:
    driver: bridge

services:

  phpparadb:
    build:
      context: build
      dockerfile: 8.3-cli.Dockerfile
    ports:
      - '1080:80'
    volumes:
      - ./td1:/var/php/td1
      - ./td2:/var/php/td2
      - ./td3:/var/php/td3
      - ./td4:/var/php/td4
      - ./sql:/var/sql
    working_dir: /var/php
    networks:
      - paradb.net
    depends_on:
      paradb.db:
        condition: service_healthy
      pgsql.db:
        condition: service_healthy
    command: php -S 0.0.0.0:80 -t /var/php
    restart: unless-stopped

  paradb.db:
    image: 'mariadb:11.6.2-noble'
    env_file: ./paradb.env
    ports:
      - '1081:3306'
    networks:
      - paradb.net
    restart: unless-stopped
    volumes:
      - ./sql:/var/sql
    healthcheck:
      test: ["CMD-SHELL", 'mariadb-admin ping -u ${MYSQL_USER} --password=${MYSQL_PASSWORD}']
      interval: 2s
      timeout: 2s
      retries: 10

  pgsql.db:
    image: 'postgres:latest'
    env_file: ./paradbpgsql.env
    networks:
      - paradb.net
    restart: unless-stopped
    volumes:
      - ./pgsql:/var/sql
    ports:
      - '1083:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 2s
      retries: 5
      timeout: 10s

  adminer:
    image: 'adminer'
    ports:
      - '1082:8080'
    networks:
      - paradb.net
    command: php -S 0.0.0.0:8080 -t /var/www/html
    restart: unless-stopped


  mongo:
    image: mongo:latest
    volumes:
    - ./mongo:/var/data
    working_dir: /var/data
    networks:
    - paradb.net
    ports:
    - 27017:27017

  mongo-express:
    image: mongo-express:latest
    networks:
    - paradb.net
    depends_on:
    - mongo
    ports:
    - "8081:8081"

  database:
    image: postgis/postgis:13-master
    # Required when running on platform other than amd64, like Apple M1/M2:
    #platform: linux/amd64
    volumes:
      - ./data/database:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: "directus"
      POSTGRES_PASSWORD: "directus"
      POSTGRES_DB: "directus"
    healthcheck:
      test: [ "CMD", "pg_isready", "--host=localhost", "--username=directus" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s

  cache:
    image: redis:6
    healthcheck:
      test: [ "CMD-SHELL", "[ $$(redis-cli ping) = 'PONG' ]" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_interval: 5s
      start_period: 30s

  directus:
    image: directus/directus:11.1.1
    ports:
      - 8055:8055
    volumes:
      - ./uploads:/directus/uploads
      - ./extensions:/directus/extensions
    depends_on:
      database:
        condition: service_healthy
      cache:
        condition: service_healthy
    environment:
      KEY: "6116487b-cda1-52c2-b5b5-c8022c45e263"
      SECRET: "255d861b-5ea1-5996-9aa3-922530ec40b1"

      DB_CLIENT: "pg"
      DB_HOST: "database"
      DB_PORT: "5432"
      DB_DATABASE: "directus"
      DB_USER: "directus"
      DB_PASSWORD: "directus"

      CACHE_ENABLED: "false"
      CACHE_AUTO_PURGE: "true"
      CACHE_STORE: "redis"
      REDIS: "redis://cache:6379"

      GRAPHQL_ENABLED: "true"
      ADMIN_EMAIL: "admin@dwm3.net"
      ADMIN_PASSWORD: "1234"

      # Make sure to set this in production
      # (see https://docs.directus.io/self-hosted/config-options#general)
      # PUBLIC_URL: "https://directus.example.com"

    # Environment variables can also be defined in a file (for example `.env`):
    # env_file:
    #	  - .env
